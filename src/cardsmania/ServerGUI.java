/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ServerGUI.java
 *
 * Created on Dec 3, 2011, 9:43:01 AM
 */
package cardsmania;

import java.net.*;
import java.io.*;
import java.util.Scanner;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;
import javax.swing.text.Document;

/**
 *
 * @author Uzzal Devkota
 */
public class ServerGUI extends javax.swing.JFrame {

    private CardsManiaServer gameServer = null;
    
    /** Creates new form ServerGUI */
    public ServerGUI() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        msgTextArea = new javax.swing.JTextArea();
        shuffleBtn = new javax.swing.JButton();
        dealBtn = new javax.swing.JButton();
        appnameLbl = new javax.swing.JLabel();
        startBtn = new javax.swing.JButton();
        startGameBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CardsMania Server");

        msgTextArea.setColumns(20);
        msgTextArea.setEditable(false);
        msgTextArea.setRows(5);
        jScrollPane1.setViewportView(msgTextArea);

        shuffleBtn.setText("Shuffle");
        shuffleBtn.setEnabled(false);
        shuffleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shuffleBtnActionPerformed(evt);
            }
        });

        dealBtn.setText("Deal");
        dealBtn.setEnabled(false);
        dealBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dealBtnActionPerformed(evt);
            }
        });

        appnameLbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        appnameLbl.setForeground(new java.awt.Color(51, 51, 255));
        appnameLbl.setText("CARDSMANIA SERVER");

        startBtn.setText("Start Server");
        startBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startBtnActionPerformed(evt);
            }
        });

        startGameBtn.setText("Start Game");
        startGameBtn.setEnabled(false);
        startGameBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startGameBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(startBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(appnameLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(101, 101, 101))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(startGameBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(shuffleBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(dealBtn)
                                .addContainerGap())))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(appnameLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startBtn)
                    .addComponent(startGameBtn)
                    .addComponent(shuffleBtn)
                    .addComponent(dealBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void shuffleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shuffleBtnActionPerformed
        // TODO add your handling code here:
        displayMessage("Shuffling Cards...");
        gameServer.shuffleCards();
    }//GEN-LAST:event_shuffleBtnActionPerformed

    private void startBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startBtnActionPerformed
        // TODO add your handling code here:
        try {
            gameServer = new CardsManiaServer();
            gameServer.start();
            startBtn.setEnabled(false);
        } catch (IOException e) {
            displayMessage("Error Starting Server");
            startBtn.setEnabled(true);
            e.printStackTrace();
        }
    }//GEN-LAST:event_startBtnActionPerformed

    private void dealBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dealBtnActionPerformed
        // TODO add your handling code here:
        displayMessage("Dealing Cards...");
        gameServer.dealCards();
        startGameBtn.setEnabled(true);
        shuffleBtn.setEnabled(false);
        dealBtn.setEnabled(false);
    }//GEN-LAST:event_dealBtnActionPerformed

    private void startGameBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startGameBtnActionPerformed
        // TODO add your handling code here:         shuffleBtn.setEnabled(true);         dealBtn.setEnabled(true);         startGameBtn.setEnabled(false);         gameServer.gameStarted = true;         gameServer.startGame();     }//GEN-LAST:event_startGameBtnActionPerformed
          shuffleBtn.setEnabled(true);
          dealBtn.setEnabled(true);
          startGameBtn.setEnabled(false);
          gameServer.startGame();
    }

    // display message in msgTextArea
     public void displayMessage( final String messageToDisplay ) {
        SwingUtilities.invokeLater(
            new Runnable() {
                public void run() {
                    msgTextArea.append( messageToDisplay + "\n" );
                    //auto scroll the msgTextArea to the bottom
                    Document d = msgTextArea.getDocument();
                    msgTextArea.select(d.getLength(), d.getLength());
                }
            }
        );
     }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ServerGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel appnameLbl;
    private javax.swing.JButton dealBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea msgTextArea;
    private javax.swing.JButton shuffleBtn;
    private javax.swing.JButton startBtn;
    private javax.swing.JButton startGameBtn;
    // End of variables declaration//GEN-END:variables

    class CardsManiaServer extends Thread {
        public ServerSocket server = null;
        public Socket connection = null;
        public int totalPlayers = 0;
        public PlayerHandler[] playerClients = null;
        public static final int port = 12345;
        public static final int totalNumberOfPlayers = 7;
        public int maxPlayerNumber = 0;
        public boolean gameStarted = false;
        public Player[] players = null;
        public Deck deck = null;
        public int cardsPerPlayer = 3;
        public int[] sameCardHolders = null;
        public Timer timer = null;
        public boolean gameOver = false;
        
        public CardsManiaServer() throws IOException {
            playerClients = new PlayerHandler[totalNumberOfPlayers];
            server = new ServerSocket(port, totalNumberOfPlayers);
            displayMessage("Server Started");
        }

        public void run() {
            while(totalPlayers < totalNumberOfPlayers) {
                try {
                    displayMessage("\n*** gameStarted = " + gameStarted + " ***\n");
                    displayMessage("Waiting For Connection");
                    connection = server.accept();
                    for(int i = 0; i < totalNumberOfPlayers; i++) {
                        if(playerClients[i] == null) {
                             playerClients[i] = new PlayerHandler(connection, i);
                             playerClients[i].start();
                             break;
                        }
                    }
                    totalPlayers++;
                    maxPlayerNumber = totalPlayers;
                    if(totalPlayers >= 3) {
                        startGameBtn.setEnabled(true);
                        displayMessage("Auto Starting Game in 5 seconds");
                        timer = new Timer();
                        if(gameStarted == false)
                            timer.schedule(new AutoStartGame(), 5000);
                    }
                } catch (IOException ex) {
                    Logger.getLogger(ServerGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        
        public void startGame() {
            gameStarted = true;
            deck = new Deck();
            players = new Player[totalPlayers];
            for(int i = 0; i < totalPlayers; i++) {
                players[i] = new Player();
                players[i].hand.handCards = new Card[cardsPerPlayer];
                players[i].totalAmount = 1000;
                players[i].chaalAmount = 5;
            }
            sameCardHolders = new int[totalPlayers];
            deck.shuffle();
        }

        public void shuffleCards() {
            deck.shuffle();
            deck.cutCards();
        }
        
        //as dealt in real
        public void dealCards() {
            timer.cancel();
            for(int i = 0; i < totalPlayers; i++) {
                for(int j = 0; j < cardsPerPlayer; j++) {
                    if(deck.currentCardIndex > 51) {
                        deck.currentCardIndex = 0;
                    }
                    players[i].hand.handCards[j] = deck.getCardAt(deck.currentCardIndex);
                    deck.currentCardIndex++;
                }
            }
            send();
        }

        public void send() {
            for(int i = 0; i < totalPlayers; i++) {
                players[i].hand.arrange();
                try {
                    playerClients[i].output.writeObject(players[i]);
                    playerClients[i].output.flush();
                } catch (IOException ex) {
                    Logger.getLogger(ServerGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
       
//        public void declareWinner() {
//            int winner = 0;
//            int winnersCount = 0;
//            for(int i = 0; i < totalPlayers - 1; i++) {
//                if(players[i+1].hand.isGreaterHand(players[winner].hand))
//                    winner = i + 1;
//                if(players[i].hand.isEqualHand(players[i+1].hand)) {
//                    sameCardHolders[winnersCount] = i;
//                    sameCardHolders[winnersCount + 1] = i + 1;
//                    winnersCount++;
//                }
//            }
//            if(winnersCount == 0) {
//                System.out.println("Winner is: Player[" + winner +"]");
//                winner_lbl.setText("Winner is: Player[" + winner +"]");
//            } else {
//                System.out.println("Winners are:");
//                winner_lbl.setText("Multiple Winners");
//                for(int i = 0; i <= winnersCount; i++) {
//                    System.out.println(" Player[" + sameCardHolders[i] +"]");
//                }
//            }
//        }        
        
        class AutoStartGame extends TimerTask {
            public void run() {
                displayMessage("Auto Starting Game...");
                startGame();
                dealCards();
            }
        }
        
        //inner class of CardsManiaServer
        class PlayerHandler extends Thread {
    
            ObjectInputStream input = null;
            ObjectOutputStream output = null;
            Scanner scanner = null;
            Socket conn = null;
            int playerNumber = 0;
            int currentPlayer = 0;

            public PlayerHandler(Socket myCon, int myNum) throws IOException {
                this.conn = myCon;
                this.playerNumber = myNum;
                this.input = new ObjectInputStream(conn.getInputStream());
                this.scanner = new Scanner(System.in);
                this.output = new ObjectOutputStream(conn.getOutputStream());
                this.output.flush();
            }

            public void run() {
                displayMessage("Player Connected from \"" 
                       + conn.getInetAddress().getHostName() + "\"");
                try {
                    broadcastMsg("Player " + playerNumber + " joined the game..");
                    output.writeObject("welcome to the server!\n"
                            + "You are Player " + playerNumber);
                    output.flush();
                    new SenderHandler().start();
                    new ReceiverHandler().start();
                    playerNumber++;
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }

            public void broadcastMsg(String msg) throws IOException {
                for(int i = 0; i < maxPlayerNumber; i++) {
                    if(playerClients[i] != null) {
                        playerClients[i].output.writeObject(msg);
                        playerClients[i].output.flush();
                    }
                }
            }

            public void closeConnection() {
                try {
                    displayMessage("A Player Left. Closing the connections...");
                    totalPlayers--;
                    playerClients[playerNumber - 1].conn.close();
                    playerClients[playerNumber - 1].input.close();
                    playerClients[playerNumber - 1].output.close();
                    playerClients[playerNumber - 1] = null;
                    displayMessage("Total Players = " + totalPlayers);
                    if(totalPlayers < 3 && gameStarted == false) {
                        startGameBtn.setEnabled(false);
                    }
                } catch (IOException ex) {
                    displayMessage("IOException Occurred");
                }
            }

            //inner class of ClientHandler
            class SenderHandler extends Thread {

                public String outputMsg = null;

                public void run() {
                    try {
                        do {
                            outputMsg = scanner.nextLine();
                            broadcastMsg(outputMsg);
                        } while(!outputMsg.equals("/exit"));
                        connection.close();
                        input.close();
                        output.close();
                        System.exit(1);
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }
                }
            } // end of class SenderHandler

            //inner class of ClientHandler
            class ReceiverHandler extends Thread {

                public String inputMsg = "test";

                public void processObject(Object incomingObject) throws IOException, ClassNotFoundException {
                    if( incomingObject.getClass().toString().equals(inputMsg.getClass().toString()) ) {
                        inputMsg = "Player " + (playerNumber - 1) 
                                        + ": " + (String)incomingObject;
                        displayMessage(inputMsg);
                        broadcastMsg(inputMsg);
                    } else if( incomingObject.getClass().toString().equals(players[playerNumber - 1].getClass().toString()) ) {
                        players[playerNumber - 1] = (Player)incomingObject;
                    }
                }

                public void run() {
                    try {
                        while(true) {
                            try {
                                processObject(input.readObject());
                            } catch (ClassNotFoundException ex) {
                                ex.printStackTrace();
                                closeConnection();
                            }
                        }
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        closeConnection();
                    }
                }
            } // end of class Receiver Handler

        } // end of inner class ClientHandler

    } // end of class CardsManiaServer
    
} // end of class ServerGUI
